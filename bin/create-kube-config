#!/bin/bash -e


usage()
{
echo -e "Usage: $0 [create|delete|delete-all] args
         $0 create app_name repo publisher
         $0 delete app_name publisher
         $0 delete-all app_name publisher
         eg:-
         $0 create staging-thequint quintype/theuqint thequint
         $0 delete staging-thequint thequint
         $0 delete-all staging-thequint thequint"
exit
}


create_temp_directory()
{

TEMPORARY_DIR=`mktemp -d -t kube-configXXXXXXXX`
mkdir -p $TEMPORARY_DIR
cd $TEMPORARY_DIR
mkdir -p $app_name
cd $app_name

}

create_rc()
{
cat > rc.yml <<EOF
apiVersion: v1
kind: ReplicationController
metadata:
  name: $app_name
  namespace: $publisher
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: $app_name
        version: "1"
    spec:
      containers:
      - name: $app_name
        image: $repo_name:latest
        resources:
          limits:
            memory: 1500Mi
          requests:
            cpu: 420m
        ports:
        - containerPort: 3000
      imagePullSecrets:
        - name: myregistrykey
EOF

$kubectl create -f rc.yml
}

create_svc()
{
cat > svc.yml << EOF
apiVersion: v1
kind: Service
metadata:
  name: $app_name
  namespace: $publisher
spec:
  selector:
   app: $app_name
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer
EOF

$kubectl create -f svc.yml
}

create_ns()
{
cat > $publisher.yml << EOF
apiVersion: v1
kind: Namespace
metadata:
  name: $publisher
EOF

$kubectl create -f $publisher.yml
}

create_secret()
{
cat > image_pull_secret.yml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: myregistrykey
data:
  .dockerconfigjson: $secret
type: kubernetes.io/dockerconfigjson
EOF

$kubectl create -f image_pull_secret.yml --namespace=$publisher
}

check_exist()
{
$kubectl describe $1 $2  --namespace=$publisher > /dev/null 2>&1
exist=$?
if [ "$exist" -ne "0" ] ;then
  return "1"
else
  return "0"
fi
}

create()
{
if check_exist "$1" $2 ;then
  echo  " $2 $1 already exists. skipping..."
else
  create_$1
fi
}

proxy_config()
{
if [ "$env" == "staging" ]; then
echo -e "
        {
          name: '$app_name',
          port: '80',
          protocol: 'http',
          backups: true,
          fall: 2,
          cname:  '$app_name-web.staging.quintype.io',
          backend_servers: [
            {
              name: '$app_name',
              ipaddress: '$IP'
            }
           ]
        },"
else
echo -e "
        {
          name: '$app_name',
          port: '80',
          protocol: 'http',
          backups: true,
          fall: 2,
          cname:  '$app_name-web.quintype.io',
          backend_servers: [
            {
              name: '$app_name',
              ipaddress: '$1'
            }
           ]
        },"
fi
}

create_config()
{
create ns $publisher
create secret $secret_name
create rc $app_name
create svc $app_name
IP=$( $kubectl get svc $app_name --namespace=$publisher | grep -v CLUSTER-IP | awk '{print $2}')
proxy_config $IP
}

delete_component()
{
$kubectl delete $1 $2 --namespace=$publisher
}

delete()
{
if check_exist "$1" $2 ;then
  delete_component $1 $2
else
  echo  "$2 $1 does not exists. skipping..."
fi
}

delete_config()
{
app_name=$1
publisher=$2
#server=$(get_server)
delete "rc" "$app_name"
delete "svc" "$app_name"
if ! [ -z $ALL ] ; then
  delete "secret" "$secret_name"
  delete "ns" "$publisher"
fi
}

secret='<%= @secret %>'
secret_name='myregistrykey'

if [ "$#" -gt 1 ];then
  opt=$1
  if [ -z "$KUBE_MASTER" ]; then
    echo Please provide a deploy server
    exit 1
  fi
  server=$KUBE_MASTER
  kubectl="kubectl --server=$server"
  shift 1 
else
  usage
fi

case $opt in
   create)
      if [ $# -ne 3 ]; then
         usage
         exit 1
      fi
      app_name=$1
      repo_name=$2
      publisher=$3
      create_config
   ;;
   delete)
      if [ $# -ne 2 ]; then
         usage
         exit 1
      fi
      delete_config $1 $2
   ;;
   delete-all)
      if [ $# -ne 2 ]; then
         usage
         exit 1
      fi
      ALL=0; delete_config $1 $2
   ;;
   *) usage
   ;;
esac
